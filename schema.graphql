type Quiz {
  id: ID!
  question: String!
  alternatives: [String!]!
  answer: String!
  variant: String!
}

type FailedQuizzesEdge {
  cursor: String!
  node: Quiz
}

type PageInfo {
  hasNextPage: Boolean!
}

type FailsConnection {
  totalCount: Int!
  edges: [FailedQuizzesEdge]
  pageInfo: PageInfo!
}

type Profile {
  id: ID!
  nextQuiz(justFails: Boolean!): Quiz
  fails: FailsConnection!
}

type DatePoint {
  ds: String!
  value: Int!
}

enum ChartTimeRange {
  LAST_30_DAYS
  LIFETIME
}

type AdminProfile {
  answersOverTime(range: ChartTimeRange!): [DatePoint!]!
  sessionsOverTime(range: ChartTimeRange!): [DatePoint!]!
  feedbackOverTime(range: ChartTimeRange!): [DatePoint!]!
}

type Query {
  getProfile(fingerprint: String!): Profile!
  getAdminProfile: AdminProfile!
}

enum QuestionFeedback {
  FAULTY_QUIZ
  FAULTY_OPTIONS
  APP_BROKEN
}

type Mutation {
  addAnswer(fingerprint: ID!, quiz_id: ID!, didSucceed: Boolean!): Profile!
  addFeedback(
    fingerprint: ID!
    quiz_id: ID!
    feedback: [QuestionFeedback!]!
  ): Profile!
}

schema {
  query: Query
  mutation: Mutation
}
