// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("rescript/lib/js/array.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Cx$Avocardo = require("./core/Cx.bs.js");
var RelayRuntime = require("relay-runtime");
var Hooks = require("react-relay/hooks");
var FeedbackModuleCss = require("./Feedback.module.css");
var FeedbackAddFeedbackMutation_graphql$Avocardo = require("../__generated__/FeedbackAddFeedbackMutation_graphql.bs.js");

var style = FeedbackModuleCss;

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: FeedbackAddFeedbackMutation_graphql$Avocardo.node,
              variables: FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use(param) {
  var match = Hooks.useMutation(FeedbackAddFeedbackMutation_graphql$Avocardo.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: FeedbackAddFeedbackMutation_graphql$Avocardo.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var AddFeedback_makeVariables = FeedbackAddFeedbackMutation_graphql$Avocardo.Utils.makeVariables;

var AddFeedback_make_response_addFeedback = FeedbackAddFeedbackMutation_graphql$Avocardo.Utils.make_response_addFeedback;

var AddFeedback_makeOptimisticResponse = FeedbackAddFeedbackMutation_graphql$Avocardo.Utils.makeOptimisticResponse;

var AddFeedback = {
  makeVariables: AddFeedback_makeVariables,
  make_response_addFeedback: AddFeedback_make_response_addFeedback,
  makeOptimisticResponse: AddFeedback_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation,
  use: use
};

function Feedback(Props) {
  var fingerprint = Props.fingerprint;
  var exercise = Props.exercise;
  var onBack = Props.onBack;
  var onContinue = Props.onContinue;
  var faultyQuizRef = React.useRef(null);
  var faultyOptionRef = React.useRef(null);
  var brokenAppRef = React.useRef(null);
  var match = use(undefined);
  var addFeedback = match[0];
  return React.createElement("div", {
              className: Cx$Avocardo.join([
                    Cx$Avocardo.index.app,
                    style.feedback
                  ])
            }, React.createElement("div", {
                  className: style["feedback-question"],
                  id: "feedback"
                }, "Help us improve Avocardo!"), React.createElement("div", {
                  className: style["feedback-quiz"]
                }, "Quiz: " + exercise.quiz), React.createElement("div", undefined, React.createElement("ul", {
                      className: style["feedback-options"],
                      id: "feedback-options"
                    }, React.createElement("li", undefined, React.createElement("input", {
                              ref: faultyQuizRef,
                              type: "checkbox"
                            }), React.createElement("label", undefined, "Quiz is faulty")), React.createElement("li", undefined, React.createElement("input", {
                              ref: faultyOptionRef,
                              type: "checkbox"
                            }), React.createElement("label", undefined, "Options are faulty")), React.createElement("li", undefined, React.createElement("input", {
                              ref: brokenAppRef,
                              type: "checkbox"
                            }), React.createElement("label", undefined, "App is broken")))), React.createElement("div", {
                  className: style["feedback-controls"]
                }, React.createElement("button", {
                      id: "back",
                      onClick: (function (param) {
                          return Curry._1(onBack, undefined);
                        })
                    }, "Back"), React.createElement("button", {
                      id: "continue",
                      onClick: (function (param) {
                          Curry.app(addFeedback, [
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                {
                                  fingerprint: fingerprint,
                                  quiz_id: String(exercise.id),
                                  feedback: $$Array.map(Belt_Option.getExn, $$Array.map((function (param) {
                                                var dom = param[1].current;
                                                if (!(dom == null) && dom.checked) {
                                                  return param[0];
                                                }
                                                
                                              }), [
                                              [
                                                "FAULTY_OPTIONS",
                                                faultyOptionRef
                                              ],
                                              [
                                                "FAULTY_QUIZ",
                                                faultyQuizRef
                                              ],
                                              [
                                                "APP_BROKEN",
                                                brokenAppRef
                                              ]
                                            ]).filter(Belt_Option.isSome))
                                },
                                undefined,
                                undefined
                              ]);
                          return Curry._1(onContinue, undefined);
                        })
                    }, "Continue")));
}

var make = Feedback;

exports.style = style;
exports.AddFeedback = AddFeedback;
exports.make = make;
/* style Not a pure module */
