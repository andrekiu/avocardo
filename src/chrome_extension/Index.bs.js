// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var $$Array = require("rescript/lib/js/array.js");
var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var $$String = require("rescript/lib/js/string.js");
var $$Promise = require("reason-promise/src/js/promise.bs.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Card$Avocardo = require("./Card.bs.js");
var RescriptRelay = require("rescript-relay/src/RescriptRelay.bs.js");
var RelayRuntime = require("relay-runtime");
var Shimmer$Avocardo = require("./Shimmer.bs.js");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var Hooks = require("react-relay/hooks");
var IndexModuleCss = require("./Index.module.css");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.bs.js");
var IndexQuery_graphql$Avocardo = require("../__generated__/IndexQuery_graphql.bs.js");
var Index_filter_graphql$Avocardo = require("../__generated__/Index_filter_graphql.bs.js");
var IndexAddAnswerMutation_graphql$Avocardo = require("../__generated__/IndexAddAnswerMutation_graphql.bs.js");

function use(fRef) {
  var data = Hooks.useFragment(Index_filter_graphql$Avocardo.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(Index_filter_graphql$Avocardo.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(Index_filter_graphql$Avocardo.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return Index_filter_graphql$Avocardo.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var FilterFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

var style = IndexModuleCss;

function Index$Filter(Props) {
  var fails = Props.fails;
  var filter = Props.filter;
  var onChangeFilter = Props.onChangeFilter;
  var fails$1 = use(fails);
  var failsCount = fails$1.totalCount;
  if (failsCount === 0) {
    return null;
  } else {
    return React.createElement("div", {
                className: style.filter,
                onClick: (function (param) {
                    if (filter === /* Any */0) {
                      return Curry._1(onChangeFilter, /* JustFails */1);
                    } else {
                      return Curry._1(onChangeFilter, /* Any */0);
                    }
                  })
              }, filter === /* Any */0 ? String.fromCodePoint(128293) : String.fromCodePoint(128584), " ", failsCount);
  }
}

var Filter = {
  style: style,
  make: Index$Filter
};

function use$1(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(IndexQuery_graphql$Avocardo.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(IndexQuery_graphql$Avocardo.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(IndexQuery_graphql$Avocardo.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(IndexQuery_graphql$Avocardo.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, IndexQuery_graphql$Avocardo.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, IndexQuery_graphql$Avocardo.node, IndexQuery_graphql$Avocardo.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: 0,
                        _0: IndexQuery_graphql$Avocardo.Internal.convertResponse(res),
                        [Symbol.for("name")]: "Ok"
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: 1,
                        _0: err,
                        [Symbol.for("name")]: "Error"
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  return $$Promise.map(Hooks.fetchQuery(environment, IndexQuery_graphql$Avocardo.node, IndexQuery_graphql$Avocardo.Internal.convertVariables(variables), {
                    networkCacheConfig: networkCacheConfig,
                    fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
                  }).toPromise(), (function (res) {
                return IndexQuery_graphql$Avocardo.Internal.convertResponse(res);
              }));
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(IndexQuery_graphql$Avocardo.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(IndexQuery_graphql$Avocardo.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(IndexQuery_graphql$Avocardo.node, IndexQuery_graphql$Avocardo.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = IndexQuery_graphql$Avocardo.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use$1,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: IndexAddAnswerMutation_graphql$Avocardo.node,
              variables: IndexAddAnswerMutation_graphql$Avocardo.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, IndexAddAnswerMutation_graphql$Avocardo.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? IndexAddAnswerMutation_graphql$Avocardo.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, IndexAddAnswerMutation_graphql$Avocardo.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(IndexAddAnswerMutation_graphql$Avocardo.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, IndexAddAnswerMutation_graphql$Avocardo.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? IndexAddAnswerMutation_graphql$Avocardo.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, IndexAddAnswerMutation_graphql$Avocardo.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: IndexAddAnswerMutation_graphql$Avocardo.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var IndexAddAnswerMutation_makeVariables = IndexAddAnswerMutation_graphql$Avocardo.Utils.makeVariables;

var IndexAddAnswerMutation_make_response_addAnswer_fails = IndexAddAnswerMutation_graphql$Avocardo.Utils.make_response_addAnswer_fails;

var IndexAddAnswerMutation_make_response_addAnswer = IndexAddAnswerMutation_graphql$Avocardo.Utils.make_response_addAnswer;

var IndexAddAnswerMutation_makeOptimisticResponse = IndexAddAnswerMutation_graphql$Avocardo.Utils.makeOptimisticResponse;

var IndexAddAnswerMutation = {
  makeVariables: IndexAddAnswerMutation_makeVariables,
  make_response_addAnswer_fails: IndexAddAnswerMutation_make_response_addAnswer_fails,
  make_response_addAnswer: IndexAddAnswerMutation_make_response_addAnswer,
  makeOptimisticResponse: IndexAddAnswerMutation_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$2
};

function fromQuiz(param) {
  var split = function (sentence) {
    var firstBlankspace = $$String.index(sentence, /* ' ' */32);
    return [
            $$String.sub(sentence, 0, firstBlankspace),
            $$String.sub(sentence, firstBlankspace + 1 | 0, (sentence.length - firstBlankspace | 0) - 1 | 0)
          ];
  };
  var dedupe = function (words) {
    $$Array.sort(Caml.caml_string_compare, words);
    var iterator = function (_prev, _idx, _sum) {
      while(true) {
        var sum = _sum;
        var idx = _idx;
        var prev = _prev;
        if (idx === words.length) {
          return sum;
        }
        if (prev === Caml_array.get(words, idx)) {
          _idx = idx + 1 | 0;
          continue ;
        }
        _sum = {
          hd: Caml_array.get(words, idx),
          tl: sum
        };
        _idx = idx + 1 | 0;
        _prev = Caml_array.get(words, idx);
        continue ;
      };
    };
    return $$Array.of_list(iterator("", 0, /* [] */0));
  };
  var transform = function (words, right) {
    var words$1 = dedupe($$Array.append(words, [right]));
    return $$Array.map((function (w) {
                  if (w === right) {
                    return {
                            TAG: 0,
                            _0: w,
                            [Symbol.for("name")]: "Right"
                          };
                  } else {
                    return {
                            TAG: 1,
                            _0: w,
                            [Symbol.for("name")]: "Wrong"
                          };
                  }
                }), words$1);
  };
  var match = split(param.answer);
  var components = $$Array.map(split, param.alternatives);
  return {
          id: Caml_format.caml_int_of_string(param.id),
          quiz: param.question,
          pronouns: transform($$Array.map((function (prim) {
                      return prim[0];
                    }), components), match[0]),
          nouns: transform($$Array.map((function (prim) {
                      return prim[1];
                    }), components), match[1])
        };
}

function Index$AppImpl(Props) {
  var fingerprint = Props.fingerprint;
  var match = React.useState(function () {
        return /* Any */0;
      });
  var setFilter = match[1];
  var filter = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setFetchKey = match$1[1];
  var match$2 = use$2(undefined);
  var addAnswer = match$2[0];
  var match$3 = use$1({
        fingerprint: fingerprint,
        justFails: filter === /* JustFails */1
      }, /* NetworkOnly */3, String(match$1[0]), undefined, undefined);
  var getProfile = match$3.getProfile;
  return React.createElement(Card$Avocardo.make, {
              exercise: fromQuiz(getProfile.nextQuiz),
              next: (function (param) {
                  return Curry._1(setFetchKey, (function (key) {
                                return key + 1 | 0;
                              }));
                }),
              storeStatus: (function (e, didSucceed) {
                  Curry.app(addAnswer, [
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        {
                          fingerprint: fingerprint,
                          quiz_id: String(e.id),
                          didSucceed: didSucceed
                        },
                        undefined,
                        undefined
                      ]);
                  
                }),
              filter: React.createElement(React.Suspense, {
                    children: React.createElement(Index$Filter, {
                          fails: getProfile.fails.fragmentRefs,
                          filter: filter,
                          onChangeFilter: (function (f) {
                              return Curry._1(setFilter, (function (param) {
                                            return f;
                                          }));
                            })
                        }),
                    fallback: React.createElement("span", undefined, "Loading...")
                  })
            });
}

var AppImpl = {
  make: Index$AppImpl
};

function Index$App(Props) {
  var fingerprint = Props.fingerprint;
  return React.createElement(React.Suspense, {
              children: React.createElement(Index$AppImpl, {
                    fingerprint: fingerprint
                  }),
              fallback: React.createElement(Shimmer$Avocardo.make, {})
            });
}

var App = {
  make: Index$App
};

exports.FilterFragment = FilterFragment;
exports.Filter = Filter;
exports.Query = Query;
exports.IndexAddAnswerMutation = IndexAddAnswerMutation;
exports.fromQuiz = fromQuiz;
exports.AppImpl = AppImpl;
exports.App = App;
/* style Not a pure module */
