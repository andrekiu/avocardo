// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var $$Array = require("rescript/lib/js/array.js");
var $$String = require("rescript/lib/js/string.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Caml_array = require("rescript/lib/js/caml_array.js");

function nextDate(dsStr) {
  var ds = new Date(dsStr);
  var tokens = $$String.split_on_char(/* 'T' */84, new Date(ds.setDate(ds.getDate() + 1)).toISOString());
  if (tokens) {
    return tokens.hd;
  } else {
    return dsStr;
  }
}

function iterate(_current, end, _sum) {
  while(true) {
    var sum = _sum;
    var current = _current;
    if (current === end) {
      return sum;
    }
    var match = Js_dict.get(sum, current);
    _sum = match !== undefined ? sum : (sum[current] = {
          date: current,
          val: 0
        }, sum);
    _current = nextDate(current);
    continue ;
  };
}

function fillRows(entries) {
  var entriesByDS = Js_dict.fromArray($$Array.map((function (e) {
              return [
                      e.date,
                      e
                    ];
            }), entries));
  if (entries.length === 0) {
    return [];
  }
  var first = Caml_array.get(entries, 0).date;
  var last = Caml_array.get(entries, entries.length - 1 | 0).date;
  var filled = Js_dict.values(iterate(first, last, entriesByDS));
  $$Array.stable_sort((function (a, b) {
          return Caml.caml_string_compare(a.date, b.date);
        }), filled);
  return filled;
}

exports.nextDate = nextDate;
exports.iterate = iterate;
exports.fillRows = fillRows;
/* No side effect */
