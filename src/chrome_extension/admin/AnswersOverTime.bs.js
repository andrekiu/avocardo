// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml = require("rescript/lib/js/caml.js");
var $$Array = require("rescript/lib/js/array.js");
var React = require("react");
var $$String = require("rescript/lib/js/string.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Recharts = require("recharts");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var Hooks = require("react-relay/hooks");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.bs.js");
var AnswersOverTimeModuleCss = require("./AnswersOverTime.module.css");
var AnswersOverTime_graphql$Avocardo = require("../../__generated__/AnswersOverTime_graphql.bs.js");

var styles = AnswersOverTimeModuleCss;

function nextDate(dsStr) {
  var ds = new Date(dsStr);
  var tokens = $$String.split_on_char(/* 'T' */84, new Date(ds.setDate(ds.getDate() + 1)).toISOString());
  if (tokens) {
    return tokens.hd;
  } else {
    return dsStr;
  }
}

function iterate(_current, end, _sum) {
  while(true) {
    var sum = _sum;
    var current = _current;
    if (current === end) {
      return sum;
    }
    var match = Js_dict.get(sum, current);
    _sum = match !== undefined ? sum : (sum[current] = {
          date: current,
          val: 0
        }, sum);
    _current = nextDate(current);
    continue ;
  };
}

function fillRows(entries) {
  var entriesByDS = Js_dict.fromArray($$Array.map((function (e) {
              return [
                      e.date,
                      e
                    ];
            }), entries));
  if (entries.length === 0) {
    return [];
  }
  var first = Caml_array.get(entries, 0).date;
  var last = Caml_array.get(entries, entries.length - 1 | 0).date;
  var filled = Js_dict.values(iterate(first, last, entriesByDS));
  $$Array.stable_sort((function (a, b) {
          return Caml.caml_string_compare(a.date, b.date);
        }), filled);
  return filled;
}

function use(fRef) {
  var data = Hooks.useFragment(AnswersOverTime_graphql$Avocardo.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(AnswersOverTime_graphql$Avocardo.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(AnswersOverTime_graphql$Avocardo.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return AnswersOverTime_graphql$Avocardo.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var AnswersOverTimeFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function AnswersOverTime(Props) {
  var fragmentRef = Props.fragmentRef;
  var fragment = use(fragmentRef);
  var data = $$Array.map((function (row) {
          return {
                  ds: row.date,
                  value: row.val
                };
        }), fillRows($$Array.map((function (row) {
                  return {
                          date: row.ds,
                          val: row.value
                        };
                }), fragment.answersOverTime)));
  return React.createElement("div", {
              className: styles.answers
            }, React.createElement(Recharts.ResponsiveContainer, {
                  children: React.createElement(Recharts.BarChart, {
                        data: data,
                        height: 300,
                        width: 800,
                        children: null
                      }, React.createElement(Recharts.CartesianGrid, {
                            strokeDasharray: "3 3"
                          }), React.createElement(Recharts.XAxis, {
                            dataKey: "ds"
                          }), React.createElement(Recharts.YAxis, {}), React.createElement(Recharts.Tooltip, {}), React.createElement(Recharts.Legend, {}), React.createElement(Recharts.Bar, {
                            dataKey: "value",
                            fill: "#8884d8"
                          }))
                }));
}

var make = AnswersOverTime;

exports.styles = styles;
exports.nextDate = nextDate;
exports.iterate = iterate;
exports.fillRows = fillRows;
exports.AnswersOverTimeFragment = AnswersOverTimeFragment;
exports.make = make;
/* styles Not a pure module */
