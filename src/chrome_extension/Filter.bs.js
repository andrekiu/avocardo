// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Js_null_undefined = require("rescript/lib/js/js_null_undefined.js");
var Hooks = require("react-relay/hooks");
var RescriptRelay_Internal = require("rescript-relay/src/RescriptRelay_Internal.bs.js");
var Filter_graphql$Avocardo = require("../__generated__/Filter_graphql.bs.js");

function use(fRef) {
  var data = Hooks.useFragment(Filter_graphql$Avocardo.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(Filter_graphql$Avocardo.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(Filter_graphql$Avocardo.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return Filter_graphql$Avocardo.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var FilterFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function Filter(Props) {
  var fails = Props.fails;
  var filter = Props.filter;
  var onChangeFilter = Props.onChangeFilter;
  var className = Props.className;
  var fails$1 = use(fails);
  var failsCount = fails$1.totalCount;
  if (failsCount === 0 && filter !== /* JustFails */1) {
    return null;
  } else {
    return React.createElement("div", {
                className: className,
                onClick: (function (param) {
                    if (filter === /* Any */0) {
                      return Curry._1(onChangeFilter, /* JustFails */1);
                    } else {
                      return Curry._1(onChangeFilter, /* Any */0);
                    }
                  })
              }, filter === /* Any */0 ? String.fromCodePoint(128293) : String.fromCodePoint(128584), failsCount === 0 ? null : " " + String(failsCount));
  }
}

var make = Filter;

exports.FilterFragment = FilterFragment;
exports.make = make;
/* react Not a pure module */
