// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var PronounExercises$Avocardo = require("../server/exercises/PronounExercises.bs.js");

var $$throw = (function throwJSExn(a) { throw a; });

var cache = Hashtbl.create(undefined, 100);

function getExercise(param) {
  return fetch("http://127.0.0.1:3000/pronoun_exercises").then(function (prim) {
                return prim.json();
              }).then(function (txt) {
              return Promise.resolve(Json_decode.field("data", PronounExercises$Avocardo.Decode.exercise, txt));
            });
}

function create(param) {
  var id = Hashtbl.length(cache);
  var tok = "conn-" + id;
  Hashtbl.add(cache, tok, {
        TAG: 0,
        _0: getExercise(undefined).then(function (e) {
              Hashtbl.add(cache, tok, {
                    TAG: 1,
                    _0: e,
                    [Symbol.for("name")]: "Success"
                  });
              return Promise.resolve(e);
            }),
        [Symbol.for("name")]: "Loading"
      });
  return tok;
}

function resolve(tok) {
  var p = Hashtbl.find(cache, tok);
  if (typeof p === "number") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  if (p.TAG) {
    return p._0;
  }
  $$throw(p._0);
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var curTok = {
  contents: create(undefined)
};

function reset(param) {
  curTok.contents = create(undefined);
  return curTok.contents;
}

function curExercise(param) {
  return resolve(curTok.contents);
}

var ServerBoundary = {
  cache: cache,
  getExercise: getExercise,
  create: create,
  resolve: resolve,
  curTok: curTok,
  reset: reset,
  curExercise: curExercise
};

function current(param) {
  return curTok.contents;
}

function next(param) {
  reset(undefined);
  
}

var getExercise$1 = curExercise;

exports.$$throw = $$throw;
exports.ServerBoundary = ServerBoundary;
exports.getExercise = getExercise$1;
exports.current = current;
exports.next = next;
/* cache Not a pure module */
