// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fetch = require("bs-fetch/src/Fetch.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var PronounExercises$Avocardo = require("../server/exercises/PronounExercises.bs.js");

var get = (function get(m) {
  return process.env.NEXT_PUBLIC_SERVER_DOMAIN;
});

function getPathWithDomain(path) {
  var maybeDomain = get(undefined);
  var domain = Belt_Option.getExn(maybeDomain);
  return "" + domain + "/api/" + path;
}

function saveAnswer(payload) {
  fetch(getPathWithDomain("answer"), Fetch.RequestInit.make(/* Post */2, {
                "Content-Type": "application/json"
              }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then(function (prim) {
        return prim.json();
      });
  
}

function getExercise(param) {
  return fetch(getPathWithDomain("pronoun_exercises")).then(function (prim) {
                return prim.json();
              }).then(function (txt) {
              return Promise.resolve(Json_decode.field("data", PronounExercises$Avocardo.Decode.exercise, txt));
            });
}

exports.get = get;
exports.getPathWithDomain = getPathWithDomain;
exports.saveAnswer = saveAnswer;
exports.getExercise = getExercise;
/* No side effect */
