// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var MySql2 = require("bs-mysql2/src/MySql2.bs.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var DB$Avocardo = require("../db/DB.bs.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var RenderQuery$Requery = require("@adnelson/requery/src/RenderQuery.bs.js");
var QueryBuilder$Requery = require("@adnelson/requery/src/QueryBuilder.bs.js");
var PronounExercises$Avocardo = require("./PronounExercises.bs.js");

function row(json) {
  return {
          id: Json_decode.field("id", Json_decode.$$int, json),
          question: Json_decode.field("question", Json_decode.string, json),
          answer: Json_decode.field("answer", Json_decode.string, json),
          alternatives: Json_decode.field("alternatives", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json)
        };
}

var Decode = {
  row: row
};

function format(param) {
  var split = function (sentence) {
    var firstBlankspace = $$String.index(sentence, /* " " */32);
    return [
            $$String.sub(sentence, 0, firstBlankspace),
            $$String.sub(sentence, firstBlankspace + 1 | 0, (sentence.length - firstBlankspace | 0) - 1 | 0)
          ];
  };
  var dedupe = function (words) {
    $$Array.sort(Caml_primitive.caml_string_compare, words);
    var iterator = function (_prev, _idx, _sum) {
      while(true) {
        var sum = _sum;
        var idx = _idx;
        var prev = _prev;
        if (idx === words.length) {
          return sum;
        }
        if (prev === Caml_array.caml_array_get(words, idx)) {
          _idx = idx + 1 | 0;
          continue ;
        }
        _sum = {
          hd: Caml_array.caml_array_get(words, idx),
          tl: sum
        };
        _idx = idx + 1 | 0;
        _prev = Caml_array.caml_array_get(words, idx);
        continue ;
      };
    };
    return $$Array.of_list(iterator("", 0, /* [] */0));
  };
  var transform = function (words, right) {
    var words$1 = dedupe($$Array.append(words, [right]));
    return $$Array.map((function (w) {
                  if (w === right) {
                    return {
                            TAG: 0,
                            _0: w,
                            [Symbol.for("name")]: "Right"
                          };
                  } else {
                    return {
                            TAG: 1,
                            _0: w,
                            [Symbol.for("name")]: "Wrong"
                          };
                  }
                }), words$1);
  };
  var match = split(param.answer);
  var components = $$Array.map(split, param.alternatives);
  return {
          id: param.id,
          quiz: param.question,
          pronouns: transform($$Array.map((function (prim) {
                      return prim[0];
                    }), components), match[0]),
          nouns: transform($$Array.map((function (prim) {
                      return prim[1];
                    }), components), match[1])
        };
}

function randomQuestion(param) {
  return QueryBuilder$Requery.orderBy1(QueryBuilder$Requery.call(Curry._1(QueryBuilder$Requery.fname, "RAND"), /* [] */0), QueryBuilder$Requery.asc, QueryBuilder$Requery.select(QueryBuilder$Requery.from(QueryBuilder$Requery.tableNamed(undefined, "quizzes"), {
                      hd: QueryBuilder$Requery.e(undefined, QueryBuilder$Requery.tcol(Curry._1(QueryBuilder$Requery.tname, "quizzes"), Curry._1(QueryBuilder$Requery.cname, "id"))),
                      tl: {
                        hd: QueryBuilder$Requery.e(undefined, QueryBuilder$Requery.tcol(Curry._1(QueryBuilder$Requery.tname, "quizzes"), Curry._1(QueryBuilder$Requery.cname, "question"))),
                        tl: {
                          hd: QueryBuilder$Requery.e(undefined, QueryBuilder$Requery.tcol(Curry._1(QueryBuilder$Requery.tname, "quizzes"), Curry._1(QueryBuilder$Requery.cname, "answer"))),
                          tl: {
                            hd: QueryBuilder$Requery.e(undefined, QueryBuilder$Requery.tcol(Curry._1(QueryBuilder$Requery.tname, "quizzes"), Curry._1(QueryBuilder$Requery.cname, "alternatives"))),
                            tl: /* [] */0
                          }
                        }
                      }
                    })));
}

function genPronounExercices(param) {
  return new Promise((function (resolve, reject) {
                return MySql2.execute(DB$Avocardo.getConnection(undefined), RenderQuery$Requery.Default.select(randomQuestion(undefined)), undefined, (function (msg) {
                              var variant = msg.NAME;
                              if (variant === "Select") {
                                return resolve(row(Caml_array.caml_array_get(MySql2.Select.rows(msg.VAL), 0)));
                              } else if (variant === "Mutation") {
                                return reject({
                                            RE_EXN_ID: "Failure",
                                            _1: "UNEXPECTED_MUTATION"
                                          });
                              } else {
                                return reject(MySql2.Exn.toExn(msg.VAL));
                              }
                            }));
              }));
}

function genJsonResponse(param) {
  return genPronounExercices(undefined).then(function (row) {
              return Promise.resolve(PronounExercises$Avocardo.Encode.exercise(format(row)));
            });
}

exports.Decode = Decode;
exports.format = format;
exports.randomQuestion = randomQuestion;
exports.genPronounExercices = genPronounExercices;
exports.genJsonResponse = genJsonResponse;
/* MySql2 Not a pure module */
