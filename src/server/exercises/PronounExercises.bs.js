// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

function toString(w) {
  return w._0;
}

function scramble(words, index) {
  var tokens = $$Array.map((function (w) {
          return List.nth($$String.split_on_char(/* " " */32, w), index);
        }), words);
  var answer = Caml_array.caml_array_get(tokens, 0);
  $$Array.sort(Caml_primitive.caml_string_compare, tokens);
  var iterator = function (_prev, _idx, _sum) {
    while(true) {
      var sum = _sum;
      var idx = _idx;
      var prev = _prev;
      if (tokens.length === idx) {
        return sum;
      }
      if (prev === Caml_array.caml_array_get(tokens, idx)) {
        _idx = idx + 1 | 0;
        continue ;
      }
      _sum = {
        hd: answer === Caml_array.caml_array_get(tokens, idx) ? ({
              TAG: 0,
              _0: Caml_array.caml_array_get(tokens, idx),
              [Symbol.for("name")]: "Right"
            }) : ({
              TAG: 1,
              _0: Caml_array.caml_array_get(tokens, idx),
              [Symbol.for("name")]: "Wrong"
            }),
        tl: sum
      };
      _idx = idx + 1 | 0;
      _prev = Caml_array.caml_array_get(tokens, idx);
      continue ;
    };
  };
  return Belt_Array.shuffle($$Array.of_list(iterator("~", 0, /* [] */0)));
}

function getPronounExercices(param) {
  var bigrams = Json_decode.dict((function (param) {
          return Json_decode.array(Json_decode.string, param);
        }), JSON.parse(Fs.readFileSync("src/server/db/bigrams.json", "utf8")));
  var __x = Js_dict.entries(bigrams);
  return $$Array.of_list($$Array.fold_left((function (sum, param) {
                    var opts = param[1];
                    return {
                            hd: {
                              quiz: param[0],
                              pronouns: scramble(opts, 0),
                              nouns: scramble(opts, 1)
                            },
                            tl: sum
                          };
                  }), /* [] */0, __x));
}

function word(w) {
  if (w.TAG) {
    return Json_encode.object_({
                hd: [
                  "word",
                  w._0
                ],
                tl: {
                  hd: [
                    "is_solution",
                    false
                  ],
                  tl: /* [] */0
                }
              });
  } else {
    return Json_encode.object_({
                hd: [
                  "word",
                  w._0
                ],
                tl: {
                  hd: [
                    "is_solution",
                    true
                  ],
                  tl: /* [] */0
                }
              });
  }
}

function exercise(param) {
  return Json_encode.object_({
              hd: [
                "quiz",
                param.quiz
              ],
              tl: {
                hd: [
                  "nouns",
                  Json_encode.array(word, param.nouns)
                ],
                tl: {
                  hd: [
                    "pronouns",
                    Json_encode.array(word, param.pronouns)
                  ],
                  tl: /* [] */0
                }
              }
            });
}

var Encode = {
  word: word,
  exercise: exercise
};

function word$1(json) {
  var w = Json_decode.field("word", Json_decode.string, json);
  if (Json_decode.field("is_solution", Json_decode.bool, json)) {
    return {
            TAG: 0,
            _0: w,
            [Symbol.for("name")]: "Right"
          };
  } else {
    return {
            TAG: 1,
            _0: w,
            [Symbol.for("name")]: "Wrong"
          };
  }
}

function exercise$1(json) {
  return {
          quiz: Json_decode.field("quiz", Json_decode.string, json),
          pronouns: Json_decode.field("pronouns", (function (param) {
                  return Json_decode.array(word$1, param);
                }), json),
          nouns: Json_decode.field("nouns", (function (param) {
                  return Json_decode.array(word$1, param);
                }), json)
        };
}

var Decode = {
  word: word$1,
  exercise: exercise$1
};

function decode(json) {
  return Json_decode.field("data", exercise$1, json);
}

function pickRandom(exercises) {
  return Caml_array.caml_array_get(Belt_Array.shuffle(exercises), 0);
}

function jsonResponse(param) {
  var exercises = getPronounExercices(undefined);
  return exercise(Caml_array.caml_array_get(Belt_Array.shuffle(exercises), 0));
}

exports.toString = toString;
exports.scramble = scramble;
exports.getPronounExercices = getPronounExercices;
exports.Encode = Encode;
exports.Decode = Decode;
exports.decode = decode;
exports.pickRandom = pickRandom;
exports.jsonResponse = jsonResponse;
/* fs Not a pure module */
