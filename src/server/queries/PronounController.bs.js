// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("rescript/lib/js/array.js");
var MySql2 = require("bs-mysql2/src/MySql2.bs.js");
var $$String = require("rescript/lib/js/string.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var DB$Avocardo = require("../db/DB.bs.js");

function genQuizzes(ids) {
  var inStatement = $$String.concat(", ", $$Array.to_list(ids));
  var query = "\n    select id, question, answer, alternatives \n    from quizzes \n    where id in (" + inStatement + ")\n  ";
  return new Promise((function (resolve, reject) {
                return DB$Avocardo.withConnection(function (conn) {
                            return MySql2.execute(conn, query, undefined, (function (msg) {
                                          var variant = msg.NAME;
                                          if (variant === "Select") {
                                            return resolve(MySql2.Select.rows(msg.VAL));
                                          } else if (variant === "Mutation") {
                                            return reject({
                                                        RE_EXN_ID: "Failure",
                                                        _1: "UNEXPECTED_MUTATION"
                                                      });
                                          } else {
                                            return reject(MySql2.Exn.toExn(msg.VAL));
                                          }
                                        }));
                          });
              }));
}

function genFailures(fingerprint) {
  return new Promise((function (resolve, reject) {
                return DB$Avocardo.withConnection(function (conn) {
                            return MySql2.execute(conn, "\n        select distinct incorrect_answers.question_id as question_id\n          from (\n            select question_id, assesment \n            from answers \n            where \n              fingerprint = \"" + fingerprint + "\"\n              and assesment='INCORRECT'\n          ) AS incorrect_answers \n          left join (\n          select distinct question_id, assesment \n            from answers \n            where \n              fingerprint = \"" + fingerprint + "\" \n              and assesment='CORRECT' \n          ) as correct_answers\n          on incorrect_answers.question_id = correct_answers.question_id\n          where correct_answers.assesment is NULL\n        ", undefined, (function (msg) {
                                          var variant = msg.NAME;
                                          if (variant === "Select") {
                                            return resolve(MySql2.Select.rows(msg.VAL));
                                          } else if (variant === "Mutation") {
                                            return reject({
                                                        RE_EXN_ID: "Failure",
                                                        _1: "UNEXPECTED_MUTATION"
                                                      });
                                          } else {
                                            return reject(MySql2.Exn.toExn(msg.VAL));
                                          }
                                        }));
                          });
              }));
}

function genPronounExercise(param) {
  return new Promise((function (resolve, reject) {
                return DB$Avocardo.withConnection(function (conn) {
                            return MySql2.execute(conn, "\n        select id, question, answer, alternatives, variant\n          from quizzes \n          order by RAND() asc\n        ", undefined, (function (msg) {
                                          var variant = msg.NAME;
                                          if (variant === "Select") {
                                            return resolve(Caml_array.get(MySql2.Select.rows(msg.VAL), 0));
                                          } else if (variant === "Mutation") {
                                            return reject({
                                                        RE_EXN_ID: "Failure",
                                                        _1: "UNEXPECTED_MUTATION"
                                                      });
                                          } else {
                                            return reject(MySql2.Exn.toExn(msg.VAL));
                                          }
                                        }));
                          });
              }));
}

exports.genQuizzes = genQuizzes;
exports.genFailures = genFailures;
exports.genPronounExercise = genPronounExercise;
/* MySql2 Not a pure module */
