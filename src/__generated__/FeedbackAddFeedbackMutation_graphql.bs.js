// Generated by ReScript, PLEASE EDIT WITH CARE
/* @generated */
'use strict';

var RescriptRelay = require("rescript-relay/src/RescriptRelay.bs.js");

var Types = {};

var wrapResponseConverter = {};

function convertWrapResponse(v) {
  return RescriptRelay.convertObj(v, wrapResponseConverter, undefined, null);
}

var responseConverter = {};

function convertResponse(v) {
  return RescriptRelay.convertObj(v, responseConverter, undefined, undefined);
}

var variablesConverter = {};

function convertVariables(v) {
  return RescriptRelay.convertObj(v, variablesConverter, undefined, undefined);
}

var Internal = {
  wrapResponseConverter: wrapResponseConverter,
  wrapResponseConverterMap: undefined,
  convertWrapResponse: convertWrapResponse,
  responseConverter: responseConverter,
  responseConverterMap: undefined,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapResponse,
  convertRawResponse: convertResponse,
  variablesConverter: variablesConverter,
  variablesConverterMap: undefined,
  convertVariables: convertVariables
};

function makeVariables(fingerprint, quiz_id, feedback) {
  return {
          fingerprint: fingerprint,
          quiz_id: quiz_id,
          feedback: feedback
        };
}

function make_response_addFeedback(id) {
  return {
          id: id
        };
}

function makeOptimisticResponse(addFeedback) {
  return {
          addFeedback: addFeedback
        };
}

var Utils = {
  makeVariables: makeVariables,
  make_response_addFeedback: make_response_addFeedback,
  makeOptimisticResponse: makeOptimisticResponse
};

var node = ((function(){
var v0 = {
  "defaultValue": null,
  "kind": "LocalArgument",
  "name": "feedback"
},
v1 = {
  "defaultValue": null,
  "kind": "LocalArgument",
  "name": "fingerprint"
},
v2 = {
  "defaultValue": null,
  "kind": "LocalArgument",
  "name": "quiz_id"
},
v3 = [
  {
    "alias": null,
    "args": [
      {
        "kind": "Variable",
        "name": "feedback",
        "variableName": "feedback"
      },
      {
        "kind": "Variable",
        "name": "fingerprint",
        "variableName": "fingerprint"
      },
      {
        "kind": "Variable",
        "name": "quiz_id",
        "variableName": "quiz_id"
      }
    ],
    "concreteType": "Profile",
    "kind": "LinkedField",
    "name": "addFeedback",
    "plural": false,
    "selections": [
      {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "id",
        "storageKey": null
      }
    ],
    "storageKey": null
  }
];
return {
  "fragment": {
    "argumentDefinitions": [
      (v0/*: any*/),
      (v1/*: any*/),
      (v2/*: any*/)
    ],
    "kind": "Fragment",
    "metadata": null,
    "name": "FeedbackAddFeedbackMutation",
    "selections": (v3/*: any*/),
    "type": "Mutation",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [
      (v1/*: any*/),
      (v2/*: any*/),
      (v0/*: any*/)
    ],
    "kind": "Operation",
    "name": "FeedbackAddFeedbackMutation",
    "selections": (v3/*: any*/)
  },
  "params": {
    "cacheID": "59cc875b6aa2508d88ebbfd366229815",
    "id": null,
    "metadata": {},
    "name": "FeedbackAddFeedbackMutation",
    "operationKind": "mutation",
    "text": "mutation FeedbackAddFeedbackMutation(\n  $fingerprint: ID!\n  $quiz_id: ID!\n  $feedback: [QuestionFeedback!]!\n) {\n  addFeedback(fingerprint: $fingerprint, quiz_id: $quiz_id, feedback: $feedback) {\n    id\n  }\n}\n"
  }
};
})());

exports.Types = Types;
exports.Internal = Internal;
exports.Utils = Utils;
exports.node = node;
/* node Not a pure module */
