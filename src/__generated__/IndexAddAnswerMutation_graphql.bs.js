// Generated by ReScript, PLEASE EDIT WITH CARE
/* @generated */
'use strict';

var RescriptRelay = require("rescript-relay/src/RescriptRelay.bs.js");

var Types = {};

var wrapResponseConverter = {};

function convertWrapResponse(v) {
  return RescriptRelay.convertObj(v, wrapResponseConverter, undefined, null);
}

var responseConverter = {};

function convertResponse(v) {
  return RescriptRelay.convertObj(v, responseConverter, undefined, undefined);
}

var variablesConverter = {};

function convertVariables(v) {
  return RescriptRelay.convertObj(v, variablesConverter, undefined, undefined);
}

var Internal = {
  wrapResponseConverter: wrapResponseConverter,
  wrapResponseConverterMap: undefined,
  convertWrapResponse: convertWrapResponse,
  responseConverter: responseConverter,
  responseConverterMap: undefined,
  convertResponse: convertResponse,
  convertWrapRawResponse: convertWrapResponse,
  convertRawResponse: convertResponse,
  variablesConverter: variablesConverter,
  variablesConverterMap: undefined,
  convertVariables: convertVariables
};

function makeVariables(fingerprint, quiz_id, didSucceed) {
  return {
          fingerprint: fingerprint,
          quiz_id: quiz_id,
          didSucceed: didSucceed
        };
}

function make_response_addAnswer_fails(totalCount) {
  return {
          totalCount: totalCount
        };
}

function make_response_addAnswer(id, fails) {
  return {
          id: id,
          fails: fails
        };
}

function makeOptimisticResponse(addAnswer) {
  return {
          addAnswer: addAnswer
        };
}

var Utils = {
  makeVariables: makeVariables,
  make_response_addAnswer_fails: make_response_addAnswer_fails,
  make_response_addAnswer: make_response_addAnswer,
  makeOptimisticResponse: makeOptimisticResponse
};

var node = ((function(){
var v0 = {
  "defaultValue": null,
  "kind": "LocalArgument",
  "name": "didSucceed"
},
v1 = {
  "defaultValue": null,
  "kind": "LocalArgument",
  "name": "fingerprint"
},
v2 = {
  "defaultValue": null,
  "kind": "LocalArgument",
  "name": "quiz_id"
},
v3 = [
  {
    "alias": null,
    "args": [
      {
        "kind": "Variable",
        "name": "didSucceed",
        "variableName": "didSucceed"
      },
      {
        "kind": "Variable",
        "name": "fingerprint",
        "variableName": "fingerprint"
      },
      {
        "kind": "Variable",
        "name": "quiz_id",
        "variableName": "quiz_id"
      }
    ],
    "concreteType": "Profile",
    "kind": "LinkedField",
    "name": "addAnswer",
    "plural": false,
    "selections": [
      {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "id",
        "storageKey": null
      },
      {
        "alias": null,
        "args": null,
        "concreteType": "FailsConnection",
        "kind": "LinkedField",
        "name": "fails",
        "plural": false,
        "selections": [
          {
            "alias": null,
            "args": null,
            "kind": "ScalarField",
            "name": "totalCount",
            "storageKey": null
          }
        ],
        "storageKey": null
      }
    ],
    "storageKey": null
  }
];
return {
  "fragment": {
    "argumentDefinitions": [
      (v0/*: any*/),
      (v1/*: any*/),
      (v2/*: any*/)
    ],
    "kind": "Fragment",
    "metadata": null,
    "name": "IndexAddAnswerMutation",
    "selections": (v3/*: any*/),
    "type": "Mutation",
    "abstractKey": null
  },
  "kind": "Request",
  "operation": {
    "argumentDefinitions": [
      (v1/*: any*/),
      (v2/*: any*/),
      (v0/*: any*/)
    ],
    "kind": "Operation",
    "name": "IndexAddAnswerMutation",
    "selections": (v3/*: any*/)
  },
  "params": {
    "cacheID": "515b81f7d988819755c77b0007f093d9",
    "id": null,
    "metadata": {},
    "name": "IndexAddAnswerMutation",
    "operationKind": "mutation",
    "text": "mutation IndexAddAnswerMutation(\n  $fingerprint: ID!\n  $quiz_id: ID!\n  $didSucceed: Boolean!\n) {\n  addAnswer(fingerprint: $fingerprint, quiz_id: $quiz_id, didSucceed: $didSucceed) {\n    id\n    fails {\n      totalCount\n    }\n  }\n}\n"
  }
};
})());

exports.Types = Types;
exports.Internal = Internal;
exports.Utils = Utils;
exports.node = node;
/* node Not a pure module */
